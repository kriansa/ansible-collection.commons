#!/usr/bin/env python3
# vim: shiftwidth=4
# pylint: disable=missing-module-docstring, invalid-name, missing-function-docstring

import logging
import subprocess
import pathlib
import datetime
import argparse
import time
import configparser

logger = logging.getLogger(__name__)


class CLI:
    """Application entrypoint"""

    @staticmethod
    def main():
        """
        wg-reresolve-dns will loop through every connected wireguard interface and reapply its
        endpoint configuration to ensure that any domain gets re-resolved by your DNS server.

        By default, it looks for original configuration on wireguard configuration files,
        NetworkManager and systemd-networkd configured connections.

        You can disable either one if you don't need them all.
        """
        parser = argparse.ArgumentParser(
            prog="wg-reresolve-dns",
            description=CLI.main.__doc__,
            formatter_class=argparse.RawTextHelpFormatter,
        )
        parser.add_argument(
            "-v", "--verbose", action="store_true", help="increase the log verbosity"
        )

        parser.add_argument(
            "--no-wgconf",
            help="disable Wireguard config files as source for Wireguard connections",
            action="store_true",
            default=False,
        )
        parser.add_argument(
            "--no-networkmanager",
            help="disable NetworkManager as source for Wireguard connections",
            action="store_true",
            default=False,
        )
        parser.add_argument(
            "--no-sd-networkd",
            help="disable systemd-networkd as source for Wireguard connections",
            action="store_true",
            default=False,
        )

        parser.add_argument(
            "--wg-path",
            help="where the wireguard config files are located at",
            default="/etc/wireguard",
        )
        parser.add_argument(
            "--nm-path",
            help="where the NetworkManager connection files are located at",
            default="/etc/NetworkManager/system-connections",
        )
        parser.add_argument(
            "--sn-path",
            help="where the systemd-networkd connection files are located at",
            default=["/lib/systemd/network", "/etc/systemd/network", "/run/systemd/network"],
        )

        args = parser.parse_args()
        CLI.configure_logging(args.verbose)

        if isinstance(args.sn_path, str):
            args.sn_path = [args.sn_path]

        logger.info("Loading peer configuration from files")
        known_peers = WireguardPeerConfig.load_configured_peers(
            args.wg_path,
            args.nm_path,
            args.sn_path,
            disable_wgconf=args.no_wgconf,
            disable_networkmanager=args.no_networkmanager,
            disable_systemdnetworkd=args.no_sd_networkd,
        )

        logger.info("Initializing wireguard endpoint polling")
        while True:
            WireguardConnection.reapply_endpoints(known_peers)
            time.sleep(30)

    @staticmethod
    def configure_logging(verbose=False):
        log_format = "[%(levelname)s] %(message)s"
        log_level = "DEBUG" if verbose else "INFO"
        logging.basicConfig(level=log_level, format=log_format)


class WireguardConnection:
    """Makes actions against wireguard using the `wg` CLI. Requires root access."""

    @staticmethod
    def reapply_endpoints(known_peers: "WireguardPeerConfig"):
        if len(known_peers) == 0:
            raise RuntimeError("No wireguard peers found in the provided configuration!")

        for interface, connected_peer in WireguardConnection.get_connected_peers().items():
            if connected_peer not in known_peers:
                logger.warning(
                    "The peer '%s' was not found in any config file, skipping.", connected_peer
                )
                continue

            endpoint = known_peers[connected_peer]
            logger.debug("Peer '%s' endpoint is '%s'", connected_peer, endpoint)
            WireguardConnection.update_interface(interface, connected_peer, endpoint)

    @staticmethod
    def get_connected_peers() -> dict[str, str]:
        """List all connected interfaces -> peers"""
        peers = subprocess.run(["wg", "show", "all", "peers"], capture_output=True, check=True)

        peers_dict = {}
        for peer in peers.stdout.decode("utf-8").strip().split("\n"):
            key, value = peer.split("\t", 1)
            peers_dict[key] = value

        return peers_dict

    @staticmethod
    def update_interface(interface: str, peer: str, endpoint: str):
        latest_handshake = subprocess.run(
            ["wg", "show", interface, "latest-handshakes"], capture_output=True, check=True
        )

        _, latest_ts = latest_handshake.stdout.decode("utf-8").strip().split("\t", 1)
        delta = datetime.datetime.now() - datetime.datetime.fromtimestamp(int(latest_ts))

        # The minimum acceptable DNS TTL is 1min, which means that it's the highest possible polling
        # we could do and anything lower than that would be useless
        if delta.total_seconds() >= 60:
            try:
                subprocess.run(
                    ["wg", "set", interface, "peer", peer, "endpoint", endpoint],
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                )
                logger.debug("Re-resolved interface '%s' endpoint", interface)
            except subprocess.CalledProcessError as error:
                output = error.output.decode("utf-8").strip() if error.output else None
                logger.warning("Failure to resolve name for interface '%s': %s", interface, output)


class WireguardPeerConfig:
    """
    A database of configured wireguard endpoints, that tecnically could come from various places
    """

    def __init__(self, peers: dict[str, str]):
        self.peers = peers

    def __getitem__(self, item: str):
        return self.peers[item]

    def __contains__(self, item: str):
        return item in self.peers

    def __len__(self):
        return len(self.peers)

    @staticmethod
    # pylint: disable=too-many-arguments
    def load_configured_peers(
        wg_conf_path: str,
        nm_conf_path: str,
        sn_conf_path: list[str],
        disable_wgconf: bool,
        disable_networkmanager: bool,
        disable_systemdnetworkd: bool,
    ) -> "WireguardPeerConfig":
        """
        Loads up all known configured peers based on Wireguard config or NetworkManager Wireguard
        connections.
        """
        known_peers = {}
        if not disable_wgconf:
            for conf_file in pathlib.Path(wg_conf_path).rglob("*.conf"):
                peers = WireguardPeerConfig.extract_from_nonstandard_ini_file(
                    conf_file, section="Peer"
                )
                known_peers = known_peers | peers

        if not disable_networkmanager:
            for conf_file in pathlib.Path(nm_conf_path).rglob("*.nmconnection"):
                peers = WireguardPeerConfig.extract_from_network_manager_conf(conf_file)
                known_peers = known_peers | peers

        if not disable_systemdnetworkd:
            for conf_path in sn_conf_path:
                for conf_file in pathlib.Path(conf_path).rglob("*.netdev"):
                    peers = WireguardPeerConfig.extract_from_nonstandard_ini_file(
                        conf_file, section="WireGuardPeer"
                    )
                    known_peers = known_peers | peers

                for conf_file in pathlib.Path(conf_path).rglob("*.netdev.d/*.conf"):
                    peers = WireguardPeerConfig.extract_from_nonstandard_ini_file(
                        conf_file, section="WireGuardPeer"
                    )
                    known_peers = known_peers | peers

        return WireguardPeerConfig(known_peers)

    @staticmethod
    def extract_from_network_manager_conf(file: "pathlib.Path") -> dict[str, str]:
        """Parse a nmconnection file and retrieve their public key and endpoint pairs"""
        config = configparser.ConfigParser()
        config.read(file)
        peers = {}

        if (
            "connection" not in config
            or "type" not in config["connection"]
            or config["connection"]["type"] != "wireguard"
        ):
            return {}

        for section, value in config.items():
            if section.startswith("wireguard-peer.") and "endpoint" in value:
                peer_key = section[15:]
                peers[peer_key] = value["endpoint"]

        return peers

    @staticmethod
    def extract_from_nonstandard_ini_file(file: "pathlib.Path", section: str) -> dict[str, str]:
        """Parse a wireguard pk->endpoint pair from a nonstandard ini file such as wireguard.conf"""

        peers = {}
        current_peer = {}

        def add_peer(peer):
            if "Endpoint" in peer and "PublicKey" in peer:
                peers[peer["PublicKey"]] = peer["Endpoint"]
                peer.clear()

        for line in file.read_text(encoding="utf-8").split("\n"):
            line = line.strip()
            if line.startswith(f"[{section}]") and current_peer:
                add_peer(current_peer)
            elif line.startswith("Endpoint") or line.startswith("PublicKey") and "=" in line:
                key, value = line.split("=", 1)
                current_peer[key.strip()] = value.strip()

        # Add the last peer
        add_peer(current_peer)

        return peers


if __name__ == "__main__":
    CLI.main()
