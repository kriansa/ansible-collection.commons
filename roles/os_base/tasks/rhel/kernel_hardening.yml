---
# TODO: Convert this file to apply to Debian as well

- ansible.builtin.command: grep -q "net.ifnames" /proc/cmdline
  failed_when: false
  register: has_ifnames

- notify: reboot
  when: has_ifnames.rc == 0
  ansible.builtin.command: grubby --update-kernel=ALL --remove-args="biosdevname net.ifnames"

- name: check if cmdline is hardened
  ansible.builtin.command: grep -q "slab_nomerge" /proc/cmdline
  failed_when: false
  register: cmdline_hardened

- name: hardens kernel command line arguments
  become: true
  when: cmdline_hardened.rc != 0
  notify: reboot
  ansible.builtin.command: grubby --update-kernel=ALL --args="{{ item }}"
  loop:
    # Disables the merging of slabs of similar sizes.
    # Sometimes a slab can be used in a vulnerable way which an attacker can exploit.
    - slab_nomerge

    # This option randomises page allocator freelists, improving security by making page allocations
    # less predictable. This also improves performance.
    - page_alloc.shuffle=1

    # Zero memory at allocation and free time.
    - init_on_free=1 init_on_alloc=1

    # Mostly useful for systems with ECC memory, setting mce to 0 will cause the kernel to panic on
    # any uncorrectable errors detected by the machine check exception system. Corrected errors will
    # just be logged. The default is mce=1, which will SIGBUS on many uncorrected errors.
    # Unfortunately this means malicious processes which try to exploit hardware bugginess (such as
    # rowhammer) will be able to try over and over, suffering only a SIGBUS at failure. Setting
    # mce=0 should have no impact. Any hardware which regularly triggers a memory-based MCE is
    # unlikely to even boot, and the default is 1 only for long-lived servers.
    - mce=0

    # Vsyscalls are obsolete, are at fixed addresses and are a target for ROP.
    - vsyscall=none

    # Enables randomisation of the kernel stack offset on syscall entries (introduced in kernel 5.13).
    # https://lkml.org/lkml/2019/3/18/246
    - randomize_kstack_offset=on

    # Restrict access to debugfs since it can contain a lot of sensitive information.
    # https://lkml.org/lkml/2020/7/16/122
    # https://github.com/torvalds/linux/blob/fb1201aececc59990b75ef59fca93ae4aa1e1444/Documentation/admin-guide/kernel-parameters.txt#L835-L848
    - debugfs=off

    # Always enable Kernel Page Table Isolation, even if the CPU claims it is safe from Meltdown.
    - pti=on

- name: hardens kernel command line arguments for bare metal
  become: true
  notify: reboot
  ansible.builtin.command: grubby --update-kernel=ALL --args="{{ item }}"
  when: ansible_facts.virtualization_role == "host" and cmdline_hardened.rc != 0
  loop:
    # Enables IOMMU to prevent DMA attacks.
    - intel_iommu=on amd_iommu=force_isolation

    # Disable the busmaster bit on all PCI bridges during very
    # early boot to avoid holes in IOMMU.
    #
    # This option may cause failures with some poorly behaved hardware and
    # should not be enabled without testing. The kernel commandline options
    # "efi=disable_early_pci_dma" or "efi=no_disable_early_pci_dma" may be
    # used to override the default. Note that PCI devices downstream from PCI
    # bridges are disconnected from their drivers first, using the UEFI
    # driver model API, so that DMA can be disabled safely at the bridge
    # level.
    #
    # https://mjg59.dreamwidth.org/54433.html
    # https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=4444f8541dad16fefd9b8807ad1451e806ef1d94
    - efi=disable_early_pci_dma

    # Enables strict enforcement of IOMMU TLB invalidation so devices will never be able to access stale data contents
    # https://github.com/torvalds/linux/blob/master/drivers/iommu/Kconfig#L97
    # Page 11 of https://lenovopress.lenovo.com/lp1467.pdf
    - iommu=force iommu.passthrough=0 iommu.strict=1
